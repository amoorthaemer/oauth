apiVersion: v1
kind: ConfigMap
metadata:
  name: wso2is-conf
  namespace: parel25
data:
    MSSQL_SERVER: 'mssql.parel25.svc.cluster.local'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wso2is-server-conf
  namespace : parel25
data:
  deployment.toml: |-
    [server]
    hostname = "$env{WSO2IS_SERVER}"
    node_ip = "$env{NODE_IP}"
    #internal_hostname = "$env{WSO2IS_SERVER}"
    base_path = "https://$ref{server.hostname}"

    [transport.https.properties]
    proxyPort="443"

    [super_admin]
    username = "admin"
    password = "admin"
    create_admin_account = true

    [user_store]
    type = "database_unique_id"

    # =====================================================
    # uncomment this if you are deploying a WSO2 IS cluster
    # =====================================================
    #[database.user]
    #type = "mssql"
    #url = "jdbc:sqlserver://$env{MSSQL_SERVER}:1433;databaseName=WSO2_SHARED_DB;SendStringParametersAsUnicode=false;encrypt=true;trustServerCertificate=true;packetSize=16000;"
    #username = "sa"
    ##password = "$env{MSSQL_SA_PASSWORD}"

    [database.identity_db]
    type = "mssql"
    url = "jdbc:sqlserver://$env{MSSQL_SERVER}:1433;databaseName=WSO2_IDENTITY_DB;SendStringParametersAsUnicode=false;encrypt=true;trustServerCertificate=true;packetSize=16000;"
    username = "sa"
    password = "$env{MSSQL_SA_PASSWORD}"

    [database.shared_db]
    type = "mssql"
    url = "jdbc:sqlserver://$env{MSSQL_SERVER}:1433;databaseName=WSO2_SHARED_DB;SendStringParametersAsUnicode=false;encrypt=true;trustServerCertificate=true;packetSize=16000;"
    username = "sa"
    password = "$env{MSSQL_SA_PASSWORD}"

    # =====================================================
    # uncomment this if you are deploying a WSO2 IS cluster
    # =====================================================
    #[database.bps_database]
    #type = "mssql"
    #url = "jdbc:sqlserver://$env{MSSQL_SERVER}:1433;databaseName=WSO2_BPS_DB;SendStringParametersAsUnicode=false;encrypt=true;trustServerCertificate=true;packetSize=16000;"
    #username = "sa"
    ##password = "$env{MSSQL_SA_PASSWORD}"

    #[keystore.tls]
    #file_name =  "tls_keystore.jks"
    #type =  "JKS"
    #password = "<PASSWORD>"
    #alias =  "<ALIAS>"
    #key_password =  "<PASSWORD>"

    [keystore.primary]
    file_name = "wso2carbon.jks"
    password = "wso2carbon"
    type="JKS"

    [truststore]
    file_name="client-truststore.jks"
    password="wso2carbon"
    type="JKS"

    [account_recovery.endpoint.auth]
    hash= "66cd9688a2ae068244ea01e70f0e230f5623b7fa4cdecb65070a09ec06452262"

    [identity.auth_framework.endpoint]
    app_password= "dashboard"

    [[oauth.custom_grant_type]]
    name="urn:ietf:params:oauth:grant-type:token-exchange"
    grant_handler="org.wso2.carbon.identity.oauth2.grant.token.exchange.TokenExchangeGrantHandler"
    grant_validator="org.wso2.carbon.identity.oauth2.grant.token.exchange.TokenExchangeGrantValidator"
    [oauth.custom_grant_type.properties]
    IdTokenAllowed=true
    IATValidityPeriod="1h"

    [cors]
    allow_generic_http_requests = true
    allow_any_origin = true
    allowed_origins = []
    allow_subdomains = true
    supported_methods = []
    support_any_header = true
    supported_headers = []
    exposed_headers = []
    supports_credentials = true
    max_age = 3600
    tag_requests = false

    # =====================================================
    # uncomment this if you are deploying a WSO2 IS cluster
    # =====================================================
    #[clustering]
    #membership_scheme = "kubernetes"
    #domain = "wso2.carbon.domain"
    #properties.membershipSchemeClassName = "org.wso2.carbon.membership.scheme.kubernetes.KubernetesMembershipScheme"
    #properties.KUBERNETES_NAMESPACE = "parel25"
    #properties.KUBERNETES_SERVICES = "wso2is"
    #properties.KUBERNETES_MASTER_SKIP_SSL_VERIFICATION = "true"
    #properties.USE_DNS = "false"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: wso2is-account
  namespace : parel25

---
# ==================================================================================
# NOTE: change from Deployment to StatefulSet if you are deploying a WSO2 IS cluster
# ==================================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wso2is-deployment
  namespace: parel25
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: wso2is
  template:
    metadata:
      labels:
        app: wso2is
    spec:
      # hostAliases:
      #   - ip: '127.0.0.1'
      #     hostnames:
      #       - 'is.parel25.nl'
      initContainers:
        - name: init-db
          image: busybox:latest
          command: ['sh', '-c', 'echo -e "Checking for the availability of MSSQL Server deployment"; while ! nc -z $MSSQL_SERVER 1433; do sleep 1; printf "-"; done; echo -e "  >> MSSQL Server has started";']
          env:
          - name: MSSQL_SERVER
            valueFrom:
              configMapKeyRef:
                name: global-conf
                key: MSSQL_SERVER
      terminationGracePeriodSeconds: 30
      securityContext:
        runAsUser: 802
      containers:
      - name: wso2is
        image: wso2is:6.1.0
        imagePullPolicy: Never
        resources:
          requests:
            memory: '1.5G'
            cpu: "1000m"
          limits:
            memory: '1.5G'
            cpu: "1000m"
        lifecycle:
          preStop:
            exec:
              command:  ['sh', '-c', '${WSO2_SERVER_HOME}/bin/wso2server.sh stop']
        volumeMounts:
        - name: wso2is-server-conf
          mountPath: /home/wso2carbon/wso2-config-volume/repository/conf/deployment.toml
          subPath: deployment.toml
        # - name: wso2is-tls
        #   mountPath: /home/wso2carbon/wso2-config-volume/repository/resources/security/tls
        ports:
        - containerPort: 9763
          protocol: TCP
        - containerPort: 9443
          protocol: TCP
        env:
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: WSO2IS_SERVER
          valueFrom:
            configMapKeyRef:
              name: global-conf
              key: WSO2IS_SERVER
        - name: MSSQL_SERVER
          valueFrom:
            configMapKeyRef:
              name: wso2is-conf
              key: MSSQL_SERVER
        - name: MSSQL_SA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mssql-credentials
              key: MSSQL_SA_PASSWORD
        - name: LANG
          valueFrom:
            configMapKeyRef:
              name: global-conf
              key: LANG
        - name: LANGUAGE
          valueFrom:
            configMapKeyRef:
              name: global-conf
              key: LANGUAGE
        - name: LC_ALL
          valueFrom:
            configMapKeyRef:
              name: global-conf
              key: LC_ALL
        - name: TZ
          valueFrom:
            configMapKeyRef:
              name: global-conf
              key: TZ
      volumes:
      - name: wso2is-server-conf
        configMap:
          name: wso2is-server-conf
      - name: wso2is-tls
        secret:
          secretName: wso2is-certificate
          items:
          - key: tls.key
            path: tls.key
          - key: tls.crt
            path: tls.crt
          - key: keystore.jks
            path: keystore.jks
      serviceAccountName: 'wso2is-account'

---
apiVersion: v1
kind: Service
metadata:
  name: is
  namespace: parel25
spec:
  selector:
    app: wso2is
  ports:
  - name: https
    protocol: TCP
    port: 443
    targetPort: 9443
  - name: http
    protocol: TCP
    port: 9763
    targetPort: 9763
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wso2is-ingress
  namespace: parel25
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: 'HTTPS'
    nginx.ingress.kubernetes.io/enable-cors: 'true'
    nginx.ingress.kubernetes.io/cors-allow-methods: 'PUT, GET, POST, OPTIONS'
spec:
  tls:
    - hosts:
        - '*.parel25.nl'
        - 'parel25.nl'
      secretName: wildcard
  rules:
    - host: is.parel25.nl
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: is
                port:
                  number: 443
  ingressClassName: nginx 
 